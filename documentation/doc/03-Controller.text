Controller
======================================

Principi fondamentali
--------------------------------------

Il Controller è quella parte che si interfaccia con le richieste e che prende le decisioni sulle azioni da eseguire in base alla richiesta specificata. Il Controller è composto da una serie di classi che hanno questa struttura:

	class Myclass {
		function myfunction($param1, $param2, ...){
			...
		}
	}

Per esempio se vogliamo realizzare un Blog e possiamo costruire una classe che chiamiamo `Blog`. Tale classe ha diversi metodi: 'insertComment, showAllPost, ecc...'. Tali metodi quindi fanno in modo di gestire quella parte dell'applicazione che è il Blog.


Regole generali
--------------------------------------

 - La prima lettera di tali classi deve essere sempre maiuscola.
 - Ad ogni file corrisponde una classe. Ad esempio la classe `Blog` deve essere posta sul file `'Blog.php'`.
 - Tutte i Controller vengono messi nella cartella `/application/controller`


Metodi particolari
--------------------------------------

### `_index`
Se l'url presenta solamente il riferimento alla classe (cioè si presenta nella forma `'http://host.it/myclass'`) il metodo che viene chiamato è `_index`. A tale metodo ovviamente non vengono passati parametri e quindi esso si presenta in questo modo:

	function _index(){
		...
	}


### `_filter`
Se viene implementato il metodo `_filter` tutte le chiamate vengono dirottate su di esso. Il primo parametro che viene passato è il nome del metodo che si intendeva chiamare mentre il secondo parametro viene passato per riferimento ed è un array che rappresenta i parametri che si volevano passare a tale metodo.
Il metodo ha quindi questa struttura:

	function _filter($method, &$argv){
		...
	}

Nel caso il metodo che si intendeva chiamare non esiste il metodo `_filter` comunque non viene chiamato poichè non ha senso filtrare i parametri di un metodo che non esiste. Quindi quello che viene restituito è il classico errore di una pagina che non è stata trovata.

Nel caso ci sia un url che specifica solamente la classe il metodo che viene chiamato rimane comunque `_index` poichè anche in questo caso non ha senso filtrare un metodo che non presenta alcun parametro.

Ovviamente è possibile modificare i parametri che dovevano essere passati al metodo che si intendeva chiamare in modo da fare appunto un filtraggio.

Il metodo `_filter` può restituire o `true` o `false`. Solo nel caso in cui restituisce `true` il metodo che si intendeva chiamare viene chiamato con i parametri che sono stati eventualmente modificati.

Errori tipici
--------------------------------------

### Parameter's default value
Un errore tipico è quello di definire un metodo con i parametri che non hanno un valore di default. Questo fa scattare un `warning` di PHP nel caso in cui venga richiamato un metodo senza che vengano specificati tutti i parametri. Un esempio potrebbe essere il metodo:

	function foo($p1,$p2,$p3){
		...
	}

Ci sono diversi modi per risolvere la cosa:

- Solitamente in fase di pubblicazione tutti gli errori vengono disabilitati e i warning non verranno mai visti

- Si può definire un valore di default per tutti i parametri in modo che se non venissero specificati andrebbe bene lo stesso. 
  Ad esempio:

	function foo($p1='',$p2='',$p3=''){
		...
	}
	
- Si può definire il metodo `_filter` e fare in modo che nel caso venga chiamata `foo` ed il numero degli argomenti non è esatto venga restituito un errore
  Ad esempio:

	function _filter($method, &$argv){
		if($method == 'foo' && sizeof($argv) != 3){
			echo 'wrong parameters for foo, go away!'; 
			return false;
		}
	}


Hello World
--------------------------------------

Creiamo un file `Hello.php` e scriviamo dentro:

	class Hello {
		function world($name=''){
			echo 'Hello World ' . $name . '!';
		}
	}

Scriviamo l'url seguente:

	http://www.host.org/Hello/world/pippo

e il risultato sarà:

	Hello World Pippo!



