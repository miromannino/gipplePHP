View
======================================

Principi fondamentali
--------------------------------------

Il View è quella parte che da una rappresentazione ai dati. Questa parte viene spesso cambiata perchè si decide di cambiare il layout dell'applicazione oppure gli stessi dati devono poter essere rappresentati in modo diverso a seconda del dispositivo. Permette quindi di separare la parte di generazione dei dati da quella che effettivamente li usa per fornire una loro rappresentazione. Per lo scopo per cui è pensato viene solitamente utilizzato dal Controller per mandare in output i risultati che il Controller ha ottenuto. Vedremo comunque che anche il Model può usare il View.

In questo framework si è scelto a differenza di molti altri di usare un motore di template molto versatile e potente: Twig.


Sintassi Twig
--------------------------------------

Twig solitamente usa come sintassi i separatori `'{# #}'` per i commenti, `'{% %}'` per il codice e `'{{ }}'` per le variabili. Si è scelto di modificare tale sintassi usandone una più conosciuta che è: `'<# #>'` per i commenti, `'<% %>'` per il codice e `'<%= %>'` per le variabili. E' comunque possibile usare una propria sintassi a piacimento configurando opportunamente il file `'/system/config/twig.php'`.


Twig
--------------------------------------

Per capire il funzionamento di twig consigliamo la lettura della documentazione ufficiale e in particolar modo: 'Twig for Template Designers'.


Utilizzo
--------------------------------------

Per chiamare il View si utilizza il metodo `System::loadView()`. Tale funzione restituisce un oggetto di tipo System_View, tale oggetto quando viene istanziato crea un `Twig_Environment` (leggere guida twig) e lo crea usando un loader che è il `Twig_Loader_Filesystem`. A tale environment, in modo predefinito, vengono caricate le estensioni 'i18n' ed 'escaper', si può comunque cambiare tale comportamento dalle configurazioni di sistema nel file `'/system/config/twig.php'`. Il loader viene creato specificando che la cartella dei template si trova nella cartella `'/application/view'`. Se volessimo ad esempio porre in output un template che si trova in `'/application/view/me/about.html'` dovremmo specificare come nome del template `'me/about.html'`.

Esempio:
	class MyClass {
		function __costruct(){
			$this->view = System::loadView();
		}

		function about($id){
			$this->view = setTheme('myTheme');
			$this->view->display('about.html', array('var1' => 'value1', ...));		
		}

	}
	
	
`display($template [, $variables])`
--------------------------------------

E' il metodo più importante del View poichè permette di porre in output il risultato di trasformazione di un determinato template specificato in `$template` e con una serie di variabili specificate in `$variables`. Il metodo, da come si nota dal prototipo, può essere chiamato senza specificare alcuna variabile e questo accade tutte le volte che abbiamo a che fare con pagine statiche.


`render($template [, $variables])`
--------------------------------------

Nel caso volessimo mettere il risultato della trasformazione in una variabile possiamo usare il metodo `render`. Tale metodo, per tutto il resto, si comporta allo stesso modo del metodo `display` 


Themes
--------------------------------------

Il View mette a disposizione degli aiuti nel caso in cui si ci ritrovi a gestire applicazioni che necessitano cambi di tema in modo dinamico. Per prima cosa, dalla configurazione dell'applicazione `'/applicaton/configsystem/main.php'` è possibile settare `'default_theme'` indicando il nome del tema di default, se esso non viene settato il tema di default sarà la stringa vuota. Inoltre View mette a disposizione un metodo `setTheme($name)` che fa in modo di settare il tema corrente rendendo di fatto possibile un tema che cambia in modo dinamico.


Help Variables
--------------------------------------

I metodi citati aggiungono sempre delle variabili all'array passato come parametro aggiungendo 'ThemeName' e 'WebRoot', anche se non è stato passato alcun array.
'ThemeName' è una variabile che contiene il tema corrente mentre 'WebRoot' da indicazioni sulla root del sito vista dal client. 

### WebRoot

Ricordiamo brevemente che la WebRoot indica la root vista dal client. Se abbiamo che l'applicazione è nella root del nostro server `'host.it'` allora abbiamo che `WebRoot = ''` e nell'html quando scriviamo `<img href="<%=WebRoot%>/resource/img/ciao.jpg"/>` il browser del client prenderà come immagine `'http://host.it/resource/img/ciao.jpg'`.
   Se abbiamo invece che la nostra applicazione è in una sottocartella (ad esempio in '/miosito') allora abbiamo `WebRoot = '/miosito' e di conseguenza usando lo stesso codice html visto prima il client questa volta prenderà come immagine `'http://host.it/miosito/resource/img/ciao.jpg'`

Se per qualcuno scrivere prima di ogni path tale variabile può sembrare inutile poichè pensa che il sito si troverà sempre nella root di un host è libero di non usarla del tutto.

### ThemeName

E' il nome del tema corrente che viene settato o dal file di configurazione o dalla funzione `setTheme($name)`. Questo nome può essere usato per tutti gli scopi che si vogliono come calcolare la path specifica per i file css, per stampare all'utente il nome del tema che sta visualizzando oppure usarla per specificare un template opportuno specifico per quel tema.

Ecco un esempio di una gestione che prende in considerazione molti aspetti:

***`/application/view/home.html`***

	<% extends "layout/" ~ ThemeName ~ "/main.html" %>
	<% block css %>
		<% parent %>
		<link href="<%= WebRoot %>/style/css/home.css" rel="stylesheet" type="text/css" />
	<% endblock %>
	<% block header %> <h1>this is my header</h1> <% endblock %>
	<% block content %> <p>this is my content, ...</p> <% endblock %>
	<% block footer %> this is my footer <% endblock %>

**`/application/view/layout/default/main.html`**

	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="it" lang="it">
		<head>
			<title><% block title %><% endblock %></title>
			<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> 
			<% block css %>
				<link href="<%= WebRoot %>/style/<%= ThemeName %>/base.css" rel="stylesheet" type="text/css" />
			<% endblock %>
		</head>
		<body>
			<div id="container">
				<div id="header"><% block header %><% endblock %></div>
				<div id="content"><% block content %><% endblock %></div>
				<div id="footer"><% block footer %><% endblock %></div>
			</div>
		</body>
	</html>

**`/application/view/layout/reverse/main.html`**

	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="it" lang="it">
		<head>
			<title><% block title %><% endblock %></title>
			<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> 
			<% block css %>
				<link href="<%= WebRoot %>/style/<%= ThemeName %>/base.css" rel="stylesheet" type="text/css" />
			<% endblock %>
		</head>
		<body>
			<div id="container">
				<div id="footer"><% block footer %><% endblock %></div>
				<div id="content"><% block content %><% endblock %></div>
				<div id="header"><% block header %><% endblock %></div>
			</div>
		</body>
	</html>

Come si vede in questo esempio in base al nome del tema ('default' o 'reverse') il file `home.html` assume, oltre che uno stile diverso, una struttura completamente diversa poichè nel file contenuto dentro 'default' l'ordine dei blocchi è < header - content - footer > mentre in 'reverse' l'ordine è < footer - content - header >. Ciò fa vedere come si può, usando il nome del tema, cambiare sia lo stile che i file html che stanno alla base cambiando completamente la disposizione dei vari blocchi.


Internazionalization
--------------------------------------

[TODO]

